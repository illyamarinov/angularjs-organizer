const app = angular.module('Trello', ['ngAnimate', 'ngRoute', 'ngSanitize']);

app.config(['$routeProvider', '$locationProvider', '$provide', '$httpProvider', '$qProvider', 'CONSTANTS', 'EVENTS', function ($routeProvider, $locationProvider, $provide, $httpProvider, $qProvider, CONSTANTS, EVENTS) {

    // disable error on unhandled rejections
    //$qProvider.errorOnUnhandledRejections(false);

    $routeProvider.when('/', {
        templateUrl: 'scripts/pages/home/home.html',
        controller: 'homeController',
        controllerAs: 'hc'
    }).when('/board', {
        templateUrl: 'scripts/pages/board/board.html',
        controller: 'boardController',
        controllerAs: 'bc'
    }).when('/404', {
        templateUrl: 'scripts/pages/404/404.html'
    }).otherwise({
        redirectTo: '/404'
    });

    $locationProvider.html5Mode(false).hashPrefix('');

    // $provide.decorator('$locale', function ($delegate) {
    //   var value = $delegate.DATETIME_FORMATS;
    //
    //   value.SHORTDAY = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    //
    //   return $delegate;
    // });

    $httpProvider.interceptors.push(function ($q, eventBusService, EVENTS) {
        return {
            'request': function (config) {
                // eventBusService.publish(EVENTS.loaderShow);
                return config;
            },
            'response': function (response) {
                // eventBusService.publish(EVENTS.loaderHide);
                return response;
            },
            'responseError': function (rejection) {
                // eventBusService.publish(EVENTS.loaderHide);
                return $q.reject(rejection);
            }
        };
    });

    $httpProvider.defaults.transformResponse.push(function (data) {
        return data;
    });
}]);
'use strict';

app.controller('rootController', ['$scope', '$rootScope', '$q', '$location', 'eventBusService', 'CONSTANTS', 'EVENTS', function ($scope, $rootScope, $q, $location, eventBusService, CONSTANTS, EVENTS) {

    $scope.init = function () {};

    $scope.init();
}]);
var constants = {
    API_URL: 'https://trello-api-by-angie.herokuapp.com/',
    PATH: ''
};

app.constant('CONSTANTS', constants);
'use strict';

var events = {

    // route
    routeChangeStart: '$routeChangeStart',

    // loaded
    loaderShow: 'loader.show',
    loaderHide: 'loader.hide'
};

app.constant('EVENTS', events);
'use strict';

app.factory('utils', [function () {
    return {
        findByField: function (array, value, field) {
            field = field || 'Id';
            if (array) {
                return array.filter(function (item) {
                    return item[field] === value;
                })[0];
            } else {
                return null;
            }
        },
        findAllByField: function (array, field, value) {
            field = field || 'Id';
            if (array) {
                return array.filter(function (item) {
                    return item[field] === value;
                });
            } else {
                return null;
            }
        },
        makeFlat: function (object) {
            var newObject = {};
            if (!object) return {};

            Object.keys(object).map(function (key) {
                if (!angular.isObject(object[key]) || angular.isDate(object[key])) {
                    newObject[key] = object[key];
                } else {
                    newObject[key + "Id"] = object[key].Id;
                }
            });
            return newObject;
        }
    };
}]);
app.service('dashboardService', ['$http', 'CONSTANTS', function ($http, CONSTANTS) {
  return {
    getDashboards: function () {
      return $http.get(CONSTANTS.API_URL + 'dashboards');
    },

    getDashboardbyId: function (id) {
      return $http.get(CONSTANTS.API_URL + 'dashboards/' + id);
    },

    createDashboard: function (data) {
      return $http.post(CONSTANTS.API_URL + 'dashboards', data);
    },

    deleteDashboard: function (id) {
      return $http.delete(CONSTANTS.API_URL + 'dashboards/' + id);
    }
  };
}]);
app.controller('boardController', ['$scope', function ($scope) {

  $scope.lists = [{
    title: 'Need to do',
    items: [{ content: 'Learn Angular6' }]
  }, {
    title: 'Ready',
    items: [{ content: 'JavaScript' }]
  }, {
    title: 'In process',
    items: [{ content: 'Investigate AngularJS' }]
  }];

  this.addCard = function (index) {
    $scope.lists[index].items.push({ content: '' });
  };
}]);
app.controller('homeController', homeController);

homeController.$inject = ['$scope', 'dashboardService'];

function homeController($scope, dashboardService) {
  $scope.boards = [];

  $scope.getDashboards = function () {
    dashboardService.getDashboards().then(function (response) {
      $scope.boards = response.data;
    }, function (response) {
      $scope.boards = response.statusText;
    });
  };

  this.addBoard = function () {
    var data = { name: 'Dashboard ' + ($scope.boards.length + 1) };
    dashboardService.createDashboard(data).then(function () {
      $scope.getDashboards();
    });
  };

  this.deleteDashboard = function (id) {
    dashboardService.deleteDashboard(id).then(function () {
      $scope.getDashboards();
    });
  };

  $scope.init = function () {
    $scope.getDashboards();
  };

  $scope.init();
};
app.controller('cardController', function () {});
app.directive('card', function () {
  return {
    scope: {
      content: '='
    },
    restrict: 'E',
    templateUrl: 'scripts/components/card/card.html',
    controller: 'cardController',
    controllerAs: 'cc'
  };
});
app.controller('listController', function () {});
app.directive('list', function () {
  return {
    scope: {
      cards: '=',
      title: '=',
      addCard: '=',
      key: '@'
    },
    restrict: 'E',
    templateUrl: 'scripts/components/list/list.html',
    controller: 'listController',
    controllerAs: 'lc'
  };
});
'use strict';

app.factory('eventBusService', function ($rootScope) {

    var msgBus = {};

    msgBus.publish = function (msg, data) {
        data = data || {};
        $rootScope.$broadcast(msg, data);
    };

    msgBus.subscribe = function (msg, scope, func) {
        return scope.$on(msg, func); // return for destroying listener
    };

    return msgBus;
});
"use strict";

app.filter('currencyNumberFilter', ['$locale', function ($locale) {

    return function (amount, divider) {
        if (angular.isUndefined(divider)) {
            divider = ' ';
        }

        if (amount === null) {
            return amount;
        }

        if (amount) {
            var parts = amount.toFixed(2).toString().split('.');
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, divider);

            return parts.join('.');
        } else {
            return '0.00';
        }
    };
}]);
'use strict';

app.directive("contenteditable", function () {
    return {
        restrict: "A",
        require: "ngModel",
        link: function (scope, element, attrs, ngModel) {

            function read() {
                ngModel.$setViewValue(element.html());
            }

            ngModel.$render = function () {
                element.html(ngModel.$viewValue || "");
            };

            element.bind("blur keyup change", function () {
                scope.$apply(read);
            });
        }
    };
});
'use strict';

/**
 * Example of use:
 * <input type="email" name="email2" ng-model="emailReg2" custom-validator="emailMatch" data-validate-function="checkEmailMatch(value)">
 * <span ng-show="registerForm.email2.$error.emailMatch">Emails have to match!</span>
 *
 * In controller:
 * $scope.checkEmailMatch=function(value) {
 *    return value===$scope.emailReg;
 * }
 */

app.directive('customValidator', [function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
            validateFunction: '&'
        },
        link: function (scope, elm, attr, ngModelCtrl) {
            ngModelCtrl.$parsers.push(function (value) {
                var result = scope.validateFunction({ 'value': value });
                if (result || result === false) {
                    if (result.then) {
                        result.then(function (data) {
                            // For promise type result object
                            ngModelCtrl.$setValidity(attr.customValidator, data);
                        }, function (error) {
                            ngModelCtrl.$setValidity(attr.customValidator, false);
                        });
                    } else {
                        ngModelCtrl.$setValidity(attr.customValidator, result);
                        return result ? value : undefined; // For boolean result return based on boolean value
                    }
                }
                return value;
            });
        }
    };
}]);
'use strict';

app.directive('noDirty', function () {
	return {
		require: 'ngModel',
		link: function (scope, element, attrs, ngModelCtrl) {
			// override the $setDirty method on ngModelController
			ngModelCtrl.$setDirty = angular.noop;
		}
	};
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvb3RDb250cm9sbGVyLmpzIiwic2hhcmVkL2NvbnN0YW50cy5qcyIsInNoYXJlZC9ldmVudHMuanMiLCJzaGFyZWQvdXRpbHMuanMiLCJzZXJ2aWNlcy9kYXNoYm9hcmRTZXJ2aWNlLmpzIiwicGFnZXMvYm9hcmQvYm9hcmRDb250cm9sbGVyLmpzIiwicGFnZXMvaG9tZS9ob21lQ29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvY2FyZC9jYXJkQ29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvY2FyZC9jYXJkRGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9saXN0L2xpc3RDb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9saXN0L2xpc3REaXJlY3RpdmUuanMiLCJzaGFyZWQvZXZlbnRCdXMvZXZlbnRCdXNTZXJ2aWNlLmpzIiwic2hhcmVkL2ZpbHRlcnMvY3VycmVuY3lOdW1iZXJGaWx0ZXIuanMiLCJzaGFyZWQvZGlyZWN0aXZlcy9jb250ZW50ZWRpdGFibGUuanMiLCJzaGFyZWQvdmFsaWRhdGlvbi9jdXN0b21WYWxpZGF0b3JEaXJlY3RpdmUuanMiLCJzaGFyZWQvdmFsaWRhdGlvbi9ub0RpcnR5LmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJHByb3ZpZGUiLCIkaHR0cFByb3ZpZGVyIiwiJHFQcm92aWRlciIsIkNPTlNUQU5UUyIsIkVWRU5UUyIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiaHRtbDVNb2RlIiwiaGFzaFByZWZpeCIsImludGVyY2VwdG9ycyIsInB1c2giLCIkcSIsImV2ZW50QnVzU2VydmljZSIsInJlc3BvbnNlIiwicmVqZWN0aW9uIiwicmVqZWN0IiwiZGVmYXVsdHMiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImRhdGEiLCIkc2NvcGUiLCIkcm9vdFNjb3BlIiwiJGxvY2F0aW9uIiwiaW5pdCIsImNvbnN0YW50cyIsIkFQSV9VUkwiLCJQQVRIIiwiY29uc3RhbnQiLCJldmVudHMiLCJyb3V0ZUNoYW5nZVN0YXJ0IiwibG9hZGVyU2hvdyIsImxvYWRlckhpZGUiLCJmYWN0b3J5IiwiZmluZEJ5RmllbGQiLCJhcnJheSIsInZhbHVlIiwiZmllbGQiLCJmaWx0ZXIiLCJpdGVtIiwiZmluZEFsbEJ5RmllbGQiLCJtYWtlRmxhdCIsIm9iamVjdCIsIm5ld09iamVjdCIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJrZXkiLCJpc09iamVjdCIsImlzRGF0ZSIsIklkIiwic2VydmljZSIsIiRodHRwIiwiZ2V0RGFzaGJvYXJkcyIsImdldCIsImdldERhc2hib2FyZGJ5SWQiLCJpZCIsImNyZWF0ZURhc2hib2FyZCIsInBvc3QiLCJkZWxldGVEYXNoYm9hcmQiLCJkZWxldGUiLCJsaXN0cyIsInRpdGxlIiwiaXRlbXMiLCJjb250ZW50IiwiYWRkQ2FyZCIsImluZGV4IiwiaG9tZUNvbnRyb2xsZXIiLCIkaW5qZWN0IiwiZGFzaGJvYXJkU2VydmljZSIsImJvYXJkcyIsInRoZW4iLCJzdGF0dXNUZXh0IiwiYWRkQm9hcmQiLCJuYW1lIiwibGVuZ3RoIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJyZXN0cmljdCIsImNhcmRzIiwibXNnQnVzIiwicHVibGlzaCIsIm1zZyIsIiRicm9hZGNhc3QiLCJzdWJzY3JpYmUiLCJmdW5jIiwiJG9uIiwiJGxvY2FsZSIsImFtb3VudCIsImRpdmlkZXIiLCJpc1VuZGVmaW5lZCIsInBhcnRzIiwidG9GaXhlZCIsInRvU3RyaW5nIiwic3BsaXQiLCJyZXBsYWNlIiwiam9pbiIsInJlcXVpcmUiLCJsaW5rIiwiZWxlbWVudCIsImF0dHJzIiwibmdNb2RlbCIsInJlYWQiLCIkc2V0Vmlld1ZhbHVlIiwiaHRtbCIsIiRyZW5kZXIiLCIkdmlld1ZhbHVlIiwiYmluZCIsIiRhcHBseSIsInZhbGlkYXRlRnVuY3Rpb24iLCJlbG0iLCJhdHRyIiwibmdNb2RlbEN0cmwiLCIkcGFyc2VycyIsInJlc3VsdCIsIiRzZXRWYWxpZGl0eSIsImN1c3RvbVZhbGlkYXRvciIsImVycm9yIiwidW5kZWZpbmVkIiwiJHNldERpcnR5Iiwibm9vcCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsTUFBTUMsUUFBUUMsTUFBUixDQUFlLFFBQWYsRUFBeUIsQ0FBQyxXQUFELEVBQWMsU0FBZCxFQUF5QixZQUF6QixDQUF6QixDQUFaOztBQUVBRixJQUFJRyxNQUFKLENBQVcsQ0FDUCxnQkFETyxFQUNXLG1CQURYLEVBQ2dDLFVBRGhDLEVBQzRDLGVBRDVDLEVBQzZELFlBRDdELEVBQzJFLFdBRDNFLEVBQ3dGLFFBRHhGLEVBRVAsVUFBVUMsY0FBVixFQUEwQkMsaUJBQTFCLEVBQTZDQyxRQUE3QyxFQUF1REMsYUFBdkQsRUFBc0VDLFVBQXRFLEVBQWtGQyxTQUFsRixFQUE2RkMsTUFBN0YsRUFBcUc7O0FBRWpHO0FBQ0E7O0FBRUFOLG1CQUNLTyxJQURMLENBQ1UsR0FEVixFQUNlO0FBQ1BDLHFCQUFhLDhCQUROO0FBRVBDLG9CQUFZLGdCQUZMO0FBR1BDLHNCQUFjO0FBSFAsS0FEZixFQU1LSCxJQU5MLENBTVUsUUFOVixFQU1vQjtBQUNaQyxxQkFBYSxnQ0FERDtBQUVaQyxvQkFBWSxpQkFGQTtBQUdaQyxzQkFBYztBQUhGLEtBTnBCLEVBV0tILElBWEwsQ0FXVSxNQVhWLEVBV2tCO0FBQ1ZDLHFCQUFhO0FBREgsS0FYbEIsRUFjS0csU0FkTCxDQWNlO0FBQ1BDLG9CQUFZO0FBREwsS0FkZjs7QUFrQkFYLHNCQUFrQlksU0FBbEIsQ0FBNEIsS0FBNUIsRUFBbUNDLFVBQW5DLENBQThDLEVBQTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBWCxrQkFBY1ksWUFBZCxDQUEyQkMsSUFBM0IsQ0FBZ0MsVUFBVUMsRUFBVixFQUFjQyxlQUFkLEVBQStCWixNQUEvQixFQUF1QztBQUNuRSxlQUFPO0FBQ0gsdUJB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QXhCRSxLQUFQO0FBMEJILENBM0JnQyxDQUFqQztBQ2JBOztBQUVBNUMsSUFBSW9GLFNBQUosQ0FBYyxTQUFkLEVBQXlCLFlBQVk7QUFDcEMsUUFBTztBQUNOcUIsV0FBUyxTQURIO0FBRU5DLFFBQU0sVUFBVXJCLEtBQVYsRUFBaUJzQixPQUFqQixFQUEwQkMsS0FBMUIsRUFBaUNZLFdBQWpDLEVBQThDO0FBQ25EO0FBQ0FBLGVBQVlPLFNBQVosR0FBd0I5SCxRQUFRK0gsSUFBaEM7QUFDQTtBQUxLLEVBQVA7QUFPQSxDQVJEIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnVHJlbGxvJywgWyduZ0FuaW1hdGUnLCAnbmdSb3V0ZScsICduZ1Nhbml0aXplJ10pO1xyXG5cclxuYXBwLmNvbmZpZyhbXHJcbiAgICAnJHJvdXRlUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJHByb3ZpZGUnLCAnJGh0dHBQcm92aWRlcicsICckcVByb3ZpZGVyJywgJ0NPTlNUQU5UUycsICdFVkVOVFMnLFxyXG4gICAgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJHByb3ZpZGUsICRodHRwUHJvdmlkZXIsICRxUHJvdmlkZXIsIENPTlNUQU5UUywgRVZFTlRTKSB7XHJcblxyXG4gICAgICAgIC8vIGRpc2FibGUgZXJyb3Igb24gdW5oYW5kbGVkIHJlamVjdGlvbnNcclxuICAgICAgICAvLyRxUHJvdmlkZXIuZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMoZmFsc2UpO1xyXG5cclxuICAgICAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgICAgICAud2hlbignLycsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9wYWdlcy9ob21lL2hvbWUuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnaG9tZUNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnaGMnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvYm9hcmQnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvcGFnZXMvYm9hcmQvYm9hcmQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnYm9hcmRDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2JjJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2hlbignLzQwNCcsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9wYWdlcy80MDQvNDA0Lmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vdGhlcndpc2Uoe1xyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogJy80MDQnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoZmFsc2UpLmhhc2hQcmVmaXgoJycpO1xyXG5cclxuICAgICAgICAvLyAkcHJvdmlkZS5kZWNvcmF0b3IoJyRsb2NhbGUnLCBmdW5jdGlvbiAoJGRlbGVnYXRlKSB7XHJcbiAgICAgICAgLy8gICB2YXIgdmFsdWUgPSAkZGVsZWdhdGUuREFURVRJTUVfRk9STUFUUztcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgdmFsdWUuU0hPUlREQVkgPSBbXCJTdVwiLCBcIk1vXCIsIFwiVHVcIiwgXCJXZVwiLCBcIlRoXCIsIFwiRnJcIiwgXCJTYVwiXTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgcmV0dXJuICRkZWxlZ2F0ZTtcclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChmdW5jdGlvbiAoJHEsIGV2ZW50QnVzU2VydmljZSwgRVZFTlRTKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBldmVudEJ1c1NlcnZpY2UucHVibGlzaChFVkVOVFMubG9hZGVyU2hvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBldmVudEJ1c1NlcnZpY2UucHVibGlzaChFVkVOVFMubG9hZGVySGlkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICdyZXNwb25zZUVycm9yJzogZnVuY3Rpb24gKHJlamVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50QnVzU2VydmljZS5wdWJsaXNoKEVWRU5UUy5sb2FkZXJIaWRlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UucHVzaChmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuYXBwLmNvbnRyb2xsZXIoJ3Jvb3RDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckcScsICckbG9jYXRpb24nLCAnZXZlbnRCdXNTZXJ2aWNlJywgJ0NPTlNUQU5UUycsICdFVkVOVFMnLFxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRxLCAkbG9jYXRpb24sIGV2ZW50QnVzU2VydmljZSwgQ09OU1RBTlRTLCBFVkVOVFMpIHtcblxuICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgICRzY29wZS5pbml0KCk7XG5cbiAgICB9XG5dKTtcbiIsInZhciBjb25zdGFudHMgPSB7XG4gICAgQVBJX1VSTDogJ2h0dHBzOi8vdHJlbGxvLWFwaS1ieS1hbmdpZS5oZXJva3VhcHAuY29tLycsXG4gICAgUEFUSDogJycsXG59O1xuXG5hcHAuY29uc3RhbnQoJ0NPTlNUQU5UUycsIGNvbnN0YW50cyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBldmVudHMgPSB7XG5cbiAgICAvLyByb3V0ZVxuICAgIHJvdXRlQ2hhbmdlU3RhcnQ6ICckcm91dGVDaGFuZ2VTdGFydCcsXG5cbiAgICAvLyBsb2FkZWRcbiAgICBsb2FkZXJTaG93OiAnbG9hZGVyLnNob3cnLFxuICAgIGxvYWRlckhpZGU6ICdsb2FkZXIuaGlkZSdcbn07XG5cbmFwcC5jb25zdGFudCgnRVZFTlRTJywgZXZlbnRzKTsiLCIndXNlIHN0cmljdCc7XG5cbmFwcC5mYWN0b3J5KCd1dGlscycsIFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmaW5kQnlGaWVsZDogZnVuY3Rpb24gKGFycmF5LCB2YWx1ZSwgZmllbGQpIHtcbiAgICAgICAgICAgIGZpZWxkID0gZmllbGQgfHwgJ0lkJztcbiAgICAgICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVtmaWVsZF0gPT09IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblx0ICAgIGZpbmRBbGxCeUZpZWxkOiBmdW5jdGlvbiAoYXJyYXksIGZpZWxkLCB2YWx1ZSkge1xuICAgICAgICAgICAgZmllbGQgPSBmaWVsZCB8fCAnSWQnO1xuICAgICAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtW2ZpZWxkXSA9PT0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtYWtlRmxhdDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgdmFyIG5ld09iamVjdCA9IHt9O1xuXHQgICAgICAgIGlmICghb2JqZWN0KSByZXR1cm4ge307XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9iamVjdCkubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc09iamVjdChvYmplY3Rba2V5XSkgfHwgYW5ndWxhci5pc0RhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld09iamVjdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqZWN0W2tleSArIFwiSWRcIl0gPSBvYmplY3Rba2V5XS5JZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXdPYmplY3Q7XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuIiwiYXBwLnNlcnZpY2UoJ2Rhc2hib2FyZFNlcnZpY2UnLCBbJyRodHRwJywgJ0NPTlNUQU5UUycsIGZ1bmN0aW9uKCRodHRwLCBDT05TVEFOVFMpIHtcclxuICByZXR1cm4ge1xyXG4gICAgZ2V0RGFzaGJvYXJkczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQ09OU1RBTlRTLkFQSV9VUkwgKyAnZGFzaGJvYXJkcycpO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXREYXNoYm9hcmRieUlkOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KENPTlNUQU5UUy5BUElfVVJMICsgJ2Rhc2hib2FyZHMvJyArIGlkKTtcclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlRGFzaGJvYXJkOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KENPTlNUQU5UUy5BUElfVVJMICsgJ2Rhc2hib2FyZHMnLCBkYXRhKTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVsZXRlRGFzaGJvYXJkOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKENPTlNUQU5UUy5BUElfVVJMICsgJ2Rhc2hib2FyZHMvJyArIGlkKTtcclxuICAgIH1cclxuICB9XHJcbn1dKTtcclxuIiwiYXBwLmNvbnRyb2xsZXIoJ2JvYXJkQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcblxyXG4gICRzY29wZS5saXN0cyA9IFt7XHJcbiAgICB0aXRsZTogJ05lZWQgdG8gZG8nLFxyXG4gICAgaXRlbXM6IFt7IGNvbnRlbnQ6ICdMZWFybiBBbmd1bGFyNicgfV1cclxuICB9LCB7XHJcbiAgICB0aXRsZTogJ1JlYWR5JyxcclxuICAgIGl0ZW1zOiBbeyBjb250ZW50OiAnSmF2YVNjcmlwdCcgfV1cclxuICB9LCB7XHJcbiAgICB0aXRsZTogJ0luIHByb2Nlc3MnLFxyXG4gICAgaXRlbXM6IFt7IGNvbnRlbnQ6ICdJbnZlc3RpZ2F0ZSBBbmd1bGFySlMnIH1dXHJcbiAgfV07XHJcblxyXG4gIHRoaXMuYWRkQ2FyZCA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAkc2NvcGUubGlzdHNbaW5kZXhdLml0ZW1zLnB1c2goeyBjb250ZW50OiAnJyB9KTtcclxuICB9O1xyXG5cclxufV0pO1xyXG4iLCJhcHAuY29udHJvbGxlcignaG9tZUNvbnRyb2xsZXInLCBob21lQ29udHJvbGxlcik7XHJcblxyXG5ob21lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnZGFzaGJvYXJkU2VydmljZSddO1xyXG5cclxuZnVuY3Rpb24gaG9tZUNvbnRyb2xsZXIoJHNjb3BlLCBkYXNoYm9hcmRTZXJ2aWNlKSB7XHJcbiAgJHNjb3BlLmJvYXJkcyA9IFtdO1xyXG5cclxuICAkc2NvcGUuZ2V0RGFzaGJvYXJkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZGFzaGJvYXJkU2VydmljZS5nZXREYXNoYm9hcmRzKCkudGhlbihcclxuICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuYm9hcmRzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSxcclxuICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuYm9hcmRzID0gcmVzcG9uc2Uuc3RhdHVzVGV4dDtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmFkZEJvYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGF0YSA9IHsgbmFtZTogJ0Rhc2hib2FyZCAnICsgKCRzY29wZS5ib2FyZHMubGVuZ3RoICsgMSkgfTtcclxuICAgIGRhc2hib2FyZFNlcnZpY2VcclxuICAgICAgLmNyZWF0ZURhc2hib2FyZChkYXRhKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuZ2V0RGFzaGJvYXJkcygpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kZWxldGVEYXNoYm9hcmQgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgZGFzaGJvYXJkU2VydmljZVxyXG4gICAgICAuZGVsZXRlRGFzaGJvYXJkKGlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuZ2V0RGFzaGJvYXJkcygpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLmdldERhc2hib2FyZHMoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuaW5pdCgpO1xyXG5cclxufTtcclxuIiwiYXBwLmNvbnRyb2xsZXIoJ2NhcmRDb250cm9sbGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgXHJcbn0pO1xyXG4iLCJhcHAuZGlyZWN0aXZlKCdjYXJkJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIGNvbnRlbnQ6ICc9J1xyXG4gICAgfSxcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvY29tcG9uZW50cy9jYXJkL2NhcmQuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnY2FyZENvbnRyb2xsZXInLFxyXG4gICAgY29udHJvbGxlckFzOiAnY2MnXHJcbiAgfVxyXG59KTtcclxuIiwiYXBwLmNvbnRyb2xsZXIoJ2xpc3RDb250cm9sbGVyJywgZnVuY3Rpb24oKSB7XHJcblxyXG59KTtcclxuIiwiYXBwLmRpcmVjdGl2ZSgnbGlzdCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBjYXJkczogJz0nLFxyXG4gICAgICB0aXRsZTogJz0nLFxyXG4gICAgICBhZGRDYXJkOiAnPScsXHJcbiAgICAgIGtleTogJ0AnXHJcbiAgICB9LFxyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9jb21wb25lbnRzL2xpc3QvbGlzdC5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdsaXN0Q29udHJvbGxlcicsXHJcbiAgICBjb250cm9sbGVyQXM6ICdsYydcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbmFwcC5mYWN0b3J5KCdldmVudEJ1c1NlcnZpY2UnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xuXG4gICB2YXIgbXNnQnVzID0ge307XG5cbiAgIG1zZ0J1cy5wdWJsaXNoID0gZnVuY3Rpb24obXNnLCBkYXRhKSB7XG4gICAgICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KG1zZywgZGF0YSk7XG4gICB9O1xuXG4gICBtc2dCdXMuc3Vic2NyaWJlID0gZnVuY3Rpb24obXNnLCBzY29wZSwgZnVuYykge1xuICAgICAgIHJldHVybiBzY29wZS4kb24obXNnLCBmdW5jKTsgLy8gcmV0dXJuIGZvciBkZXN0cm95aW5nIGxpc3RlbmVyXG4gICB9O1xuXG4gICByZXR1cm4gbXNnQnVzO1xuXG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5hcHAuZmlsdGVyKCdjdXJyZW5jeU51bWJlckZpbHRlcicsIFsnJGxvY2FsZScsIGZ1bmN0aW9uICgkbG9jYWxlKSB7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oYW1vdW50LCBkaXZpZGVyKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGRpdmlkZXIpKSB7XG4gICAgICAgICAgICBkaXZpZGVyID0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFtb3VudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbW91bnQpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGFtb3VudC50b0ZpeGVkKDIpLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgZGl2aWRlcik7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJzAuMDAnO1xuICAgICAgICB9XG4gICAgfTtcblxufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hcHAuZGlyZWN0aXZlKFwiY29udGVudGVkaXRhYmxlXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICAgICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmh0bWwoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgXCJcIik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJibHVyIGtleXVwIGNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXhhbXBsZSBvZiB1c2U6XG4gKiA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImVtYWlsMlwiIG5nLW1vZGVsPVwiZW1haWxSZWcyXCIgY3VzdG9tLXZhbGlkYXRvcj1cImVtYWlsTWF0Y2hcIiBkYXRhLXZhbGlkYXRlLWZ1bmN0aW9uPVwiY2hlY2tFbWFpbE1hdGNoKHZhbHVlKVwiPlxuICogPHNwYW4gbmctc2hvdz1cInJlZ2lzdGVyRm9ybS5lbWFpbDIuJGVycm9yLmVtYWlsTWF0Y2hcIj5FbWFpbHMgaGF2ZSB0byBtYXRjaCE8L3NwYW4+XG4gKlxuICogSW4gY29udHJvbGxlcjpcbiAqICRzY29wZS5jaGVja0VtYWlsTWF0Y2g9ZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgIHJldHVybiB2YWx1ZT09PSRzY29wZS5lbWFpbFJlZztcbiAqIH1cbiAqL1xuXG5hcHAuZGlyZWN0aXZlKCdjdXN0b21WYWxpZGF0b3InLCBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIHZhbGlkYXRlRnVuY3Rpb246ICcmJ1xuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0ciwgbmdNb2RlbEN0cmwpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHNjb3BlLnZhbGlkYXRlRnVuY3Rpb24oeyAndmFsdWUnOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0IHx8IHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50aGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbihmdW5jdGlvbiAoZGF0YSkgeyAvLyBGb3IgcHJvbWlzZSB0eXBlIHJlc3VsdCBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoYXR0ci5jdXN0b21WYWxpZGF0b3IsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KGF0dHIuY3VzdG9tVmFsaWRhdG9yLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eShhdHRyLmN1c3RvbVZhbGlkYXRvciwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPyB2YWx1ZSA6IHVuZGVmaW5lZDsgLy8gRm9yIGJvb2xlYW4gcmVzdWx0IHJldHVybiBiYXNlZCBvbiBib29sZWFuIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pOyIsIid1c2Ugc3RyaWN0JztcblxuYXBwLmRpcmVjdGl2ZSgnbm9EaXJ0eScsIGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHtcblx0XHRyZXF1aXJlOiAnbmdNb2RlbCcsXG5cdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbEN0cmwpIHtcblx0XHRcdC8vIG92ZXJyaWRlIHRoZSAkc2V0RGlydHkgbWV0aG9kIG9uIG5nTW9kZWxDb250cm9sbGVyXG5cdFx0XHRuZ01vZGVsQ3RybC4kc2V0RGlydHkgPSBhbmd1bGFyLm5vb3A7XG5cdFx0fVxuXHR9XG59KTsiXX0=
