const app = angular.module('Trello', ['ngAnimate', 'ngRoute', 'ngSanitize']);

app.config(['$routeProvider', '$locationProvider', '$provide', '$httpProvider', '$qProvider', 'CONSTANTS', 'EVENTS', function ($routeProvider, $locationProvider, $provide, $httpProvider, $qProvider, CONSTANTS, EVENTS) {

    // disable error on unhandled rejections
    //$qProvider.errorOnUnhandledRejections(false);

    $routeProvider.when('/', {
        templateUrl: 'scripts/pages/home/home.html',
        controller: 'homeController',
        controllerAs: 'hc'
    }).when('/board/:boardId', {
        templateUrl: 'scripts/pages/board/board.html',
        controller: 'boardController',
        controllerAs: 'bc'
    }).when('/404', {
        templateUrl: 'scripts/pages/404/404.html'
    }).otherwise({
        redirectTo: '/404'
    });

    $locationProvider.html5Mode(false).hashPrefix('');

    // $provide.decorator('$locale', function ($delegate) {
    //   var value = $delegate.DATETIME_FORMATS;
    //
    //   value.SHORTDAY = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    //
    //   return $delegate;
    // });

    $httpProvider.interceptors.push(function ($q, eventBusService, EVENTS) {
        return {
            'request': function (config) {
                // eventBusService.publish(EVENTS.loaderShow);
                return config;
            },
            'response': function (response) {
                // eventBusService.publish(EVENTS.loaderHide);
                return response;
            },
            'responseError': function (rejection) {
                // eventBusService.publish(EVENTS.loaderHide);
                return $q.reject(rejection);
            }
        };
    });

    $httpProvider.defaults.transformResponse.push(function (data) {
        return data;
    });
}]);
'use strict';

app.controller('rootController', ['$scope', '$rootScope', '$q', '$location', 'eventBusService', 'CONSTANTS', 'EVENTS', function ($scope, $rootScope, $q, $location, eventBusService, CONSTANTS, EVENTS) {

    $scope.init = function () {};

    $scope.init();
}]);
app.service('dashboardService', ['$http', 'CONSTANTS', function ($http, CONSTANTS) {
  return {
    getDashboards: function () {
      return $http.get(CONSTANTS.API_URL + 'dashboards');
    },

    getDashboardbyId: function (id) {
      return $http.get(CONSTANTS.API_URL + 'dashboards/' + id);
    },

    createDashboard: function (data) {
      return $http.post(CONSTANTS.API_URL + 'dashboards', data);
    },

    deleteDashboard: function (id) {
      return $http.delete(CONSTANTS.API_URL + 'dashboards/' + id);
    }
  };
}]);
app.service('listService', ['$http', 'CONSTANTS', function ($http, CONSTANTS) {
  return {
    getLists: function (boardId) {
      return $http.get(CONSTANTS.API_URL + 'dashboards/' + boardId + '/lists');
    },

    createList: function (data) {
      return $http.post(CONSTANTS.API_URL + 'dashboards/' + id + '/lists', data);
    },

    deleteList: function (boardId, listId) {
      return $http.delete(CONSTANTS.API_URL + 'dashboards/' + boardId + '/lists/' + listId);
    }
  };
}]);
var constants = {
    API_URL: 'https://trello-api-by-angie.herokuapp.com/',
    PATH: ''
};

app.constant('CONSTANTS', constants);
'use strict';

var events = {

    // route
    routeChangeStart: '$routeChangeStart',

    // loaded
    loaderShow: 'loader.show',
    loaderHide: 'loader.hide'
};

app.constant('EVENTS', events);
'use strict';

app.factory('utils', [function () {
    return {
        findByField: function (array, value, field) {
            field = field || 'Id';
            if (array) {
                return array.filter(function (item) {
                    return item[field] === value;
                })[0];
            } else {
                return null;
            }
        },
        findAllByField: function (array, field, value) {
            field = field || 'Id';
            if (array) {
                return array.filter(function (item) {
                    return item[field] === value;
                });
            } else {
                return null;
            }
        },
        makeFlat: function (object) {
            var newObject = {};
            if (!object) return {};

            Object.keys(object).map(function (key) {
                if (!angular.isObject(object[key]) || angular.isDate(object[key])) {
                    newObject[key] = object[key];
                } else {
                    newObject[key + "Id"] = object[key].Id;
                }
            });
            return newObject;
        }
    };
}]);
app.controller('cardController', function () {});
app.directive('card', function () {
  return {
    scope: {
      content: '='
    },
    restrict: 'E',
    templateUrl: 'scripts/components/card/card.html',
    controller: 'cardController',
    controllerAs: 'cc'
  };
});
app.controller('listController', function () {});
app.directive('list', function () {
  return {
    scope: {
      cards: '=',
      title: '=',
      addCard: '=',
      key: '@'
    },
    restrict: 'E',
    templateUrl: 'scripts/components/list/list.html',
    controller: 'listController',
    controllerAs: 'lc'
  };
});
'use strict';

app.directive("contenteditable", function () {
    return {
        restrict: "A",
        require: "ngModel",
        link: function (scope, element, attrs, ngModel) {

            function read() {
                ngModel.$setViewValue(element.html());
            }

            ngModel.$render = function () {
                element.html(ngModel.$viewValue || "");
            };

            element.bind("blur keyup change", function () {
                scope.$apply(read);
            });
        }
    };
});
'use strict';

app.factory('eventBusService', function ($rootScope) {

    var msgBus = {};

    msgBus.publish = function (msg, data) {
        data = data || {};
        $rootScope.$broadcast(msg, data);
    };

    msgBus.subscribe = function (msg, scope, func) {
        return scope.$on(msg, func); // return for destroying listener
    };

    return msgBus;
});
'use strict';

/**
 * Example of use:
 * <input type="email" name="email2" ng-model="emailReg2" custom-validator="emailMatch" data-validate-function="checkEmailMatch(value)">
 * <span ng-show="registerForm.email2.$error.emailMatch">Emails have to match!</span>
 *
 * In controller:
 * $scope.checkEmailMatch=function(value) {
 *    return value===$scope.emailReg;
 * }
 */

app.directive('customValidator', [function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
            validateFunction: '&'
        },
        link: function (scope, elm, attr, ngModelCtrl) {
            ngModelCtrl.$parsers.push(function (value) {
                var result = scope.validateFunction({ 'value': value });
                if (result || result === false) {
                    if (result.then) {
                        result.then(function (data) {
                            // For promise type result object
                            ngModelCtrl.$setValidity(attr.customValidator, data);
                        }, function (error) {
                            ngModelCtrl.$setValidity(attr.customValidator, false);
                        });
                    } else {
                        ngModelCtrl.$setValidity(attr.customValidator, result);
                        return result ? value : undefined; // For boolean result return based on boolean value
                    }
                }
                return value;
            });
        }
    };
}]);
'use strict';

app.directive('noDirty', function () {
	return {
		require: 'ngModel',
		link: function (scope, element, attrs, ngModelCtrl) {
			// override the $setDirty method on ngModelController
			ngModelCtrl.$setDirty = angular.noop;
		}
	};
});
app.controller('homeController', homeController);

homeController.$inject = ['$scope', 'dashboardService'];

function homeController($scope, dashboardService) {
  $scope.boards = [];

  $scope.getDashboards = function () {
    dashboardService.getDashboards().then(function (response) {
      $scope.boards = response.data;
    }, function (response) {
      $scope.boards = response.statusText;
    });
  };

  this.addBoard = function () {
    var data = { name: 'Dashboard ' + ($scope.boards.length + 1) };
    dashboardService.createDashboard(data).then(function () {
      $scope.getDashboards();
    });
  };

  this.deleteDashboard = function (id) {
    dashboardService.deleteDashboard(id).then(function () {
      $scope.getDashboards();
    });
  };

  $scope.init = function () {
    $scope.getDashboards();
  };

  $scope.init();
};
"use strict";

app.filter('currencyNumberFilter', ['$locale', function ($locale) {

    return function (amount, divider) {
        if (angular.isUndefined(divider)) {
            divider = ' ';
        }

        if (amount === null) {
            return amount;
        }

        if (amount) {
            var parts = amount.toFixed(2).toString().split('.');
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, divider);

            return parts.join('.');
        } else {
            return '0.00';
        }
    };
}]);
app.controller('boardController', boardController);

boardController.$inject = ['$scope', '$routeParams', 'dashboardService', 'listService'];

function boardController($scope, $routeParams, dashboardService, listService) {
  const boardId = $routeParams.boardId;

  dashboardService.getDashboards().then(function (response) {
    $scope.board = response.data.find(function (item) {
      return item._id === boardId;
    });
  }, function (response) {
    $scope.boards = response.statusText;
  });

  $scope.lists = [{
    title: 'Need to do',
    items: [{ content: 'Learn Angular6' }]
  }, {
    title: 'Ready',
    items: [{ content: 'JavaScript' }]
  }, {
    title: 'In process',
    items: [{ content: 'Investigate AngularJS' }]
  }];

  this.addCard = function (index) {
    $scope.lists[index].items.push({ content: '' });
  };
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
