const app = angular.module('Trello', ['ngAnimate', 'ngRoute', 'ngSanitize']);

app.config(['$routeProvider', '$locationProvider', '$provide', '$httpProvider', '$qProvider', 'CONSTANTS', 'EVENTS', function ($routeProvider, $locationProvider, $provide, $httpProvider, $qProvider, CONSTANTS, EVENTS) {

    // disable error on unhandled rejections
    //$qProvider.errorOnUnhandledRejections(false);

    $routeProvider.when('/', {
        templateUrl: 'scripts/pages/home/home.html',
        controller: 'homeController',
        controllerAs: 'hc'
    }).when('/board', {
        templateUrl: 'scripts/pages/board/board.html',
        controller: 'boardController',
        controllerAs: 'bc'
    }).when('/404', {
        templateUrl: 'scripts/pages/404/404.html'
    }).otherwise({
        redirectTo: '/404'
    });

    $locationProvider.html5Mode(false).hashPrefix('');

    // $provide.decorator('$locale', function ($delegate) {
    //   var value = $delegate.DATETIME_FORMATS;
    //
    //   value.SHORTDAY = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    //
    //   return $delegate;
    // });

    $httpProvider.interceptors.push(function ($q, eventBusService, EVENTS) {
        return {
            'request': function (config) {
                // eventBusService.publish(EVENTS.loaderShow);
                return config;
            },
            'response': function (response) {
                // eventBusService.publish(EVENTS.loaderHide);
                return response;
            },
            'responseError': function (rejection) {
                // eventBusService.publish(EVENTS.loaderHide);
                return $q.reject(rejection);
            }
        };
    });

    $httpProvider.defaults.transformResponse.push(function (data) {
        return data;
    });
}]);
'use strict';

app.controller('rootController', ['$scope', '$rootScope', '$q', '$location', 'eventBusService', 'CONSTANTS', 'EVENTS', function ($scope, $rootScope, $q, $location, eventBusService, CONSTANTS, EVENTS) {

    $scope.init = function () {};

    $scope.init();
}]);
var constants = {
    API_URL: 'https://trello-api-by-angie.herokuapp.com/',
    PATH: ''
};

app.constant('CONSTANTS', constants);
'use strict';

var events = {

    // route
    routeChangeStart: '$routeChangeStart',

    // loaded
    loaderShow: 'loader.show',
    loaderHide: 'loader.hide'
};

app.constant('EVENTS', events);
'use strict';

app.factory('utils', [function () {
    return {
        findByField: function (array, value, field) {
            field = field || 'Id';
            if (array) {
                return array.filter(function (item) {
                    return item[field] === value;
                })[0];
            } else {
                return null;
            }
        },
        findAllByField: function (array, field, value) {
            field = field || 'Id';
            if (array) {
                return array.filter(function (item) {
                    return item[field] === value;
                });
            } else {
                return null;
            }
        },
        makeFlat: function (object) {
            var newObject = {};
            if (!object) return {};

            Object.keys(object).map(function (key) {
                if (!angular.isObject(object[key]) || angular.isDate(object[key])) {
                    newObject[key] = object[key];
                } else {
                    newObject[key + "Id"] = object[key].Id;
                }
            });
            return newObject;
        }
    };
}]);
app.service('dashboardService', ['$http', 'CONSTANTS', function ($http, CONSTANTS) {
  return {
    getDashboards: function () {
      return $http.get(CONSTANTS.API_URL + 'dashboards');
    },

    getDashboardbyId: function (id) {
      return $http.get(CONSTANTS.API_URL + 'dashboards/' + id);
    },

    createDashboard: function (data) {
      return $http.post(CONSTANTS.API_URL + 'dashboards', data);
    },

    deleteDashboard: function (id) {
      return $http.delete(CONSTANTS.API_URL + 'dashboards/' + id);
    }
  };
}]);
app.service('listService', ['$http', 'CONSTANTS', function ($http, CONSTANTS) {
  return {
    getLists: function (boardId) {
      return $http.get(CONSTANTS.API_URL + 'dashboards/' + boardId + '/lists');
    },

    createList: function (data) {
      return $http.post(CONSTANTS.API_URL + 'dashboards/' + id + '/lists', data);
    },

    deleteList: function (boardId, listId) {
      return $http.delete(CONSTANTS.API_URL + 'dashboards/' + boardId + '/lists/' + listId);
    }
  };
}]);
app.controller('boardController', ['$scope', function ($scope) {

  $scope.lists = [{
    title: 'Need to do',
    items: [{ content: 'Learn Angular6' }]
  }, {
    title: 'Ready',
    items: [{ content: 'JavaScript' }]
  }, {
    title: 'In process',
    items: [{ content: 'Investigate AngularJS' }]
  }];

  this.addCard = function (index) {
    $scope.lists[index].items.push({ content: '' });
  };
}]);
app.controller('homeController', homeController);

homeController.$inject = ['$scope', 'dashboardService'];

function homeController($scope, dashboardService) {
  $scope.boards = [];

  $scope.getDashboards = function () {
    dashboardService.getDashboards().then(function (response) {
      $scope.boards = response.data;
    }, function (response) {
      $scope.boards = response.statusText;
    });
  };

  this.addBoard = function () {
    var data = { name: 'Dashboard ' + ($scope.boards.length + 1) };
    dashboardService.createDashboard(data).then(function () {
      $scope.getDashboards();
    });
  };

  this.deleteDashboard = function (id) {
    dashboardService.deleteDashboard(id).then(function () {
      $scope.getDashboards();
    });
  };

  $scope.init = function () {
    $scope.getDashboards();
  };

  $scope.init();
};
'use strict';

app.directive("contenteditable", function () {
    return {
        restrict: "A",
        require: "ngModel",
        link: function (scope, element, attrs, ngModel) {

            function read() {
                ngModel.$setViewValue(element.html());
            }

            ngModel.$render = function () {
                element.html(ngModel.$viewValue || "");
            };

            element.bind("blur keyup change", function () {
                scope.$apply(read);
            });
        }
    };
});
'use strict';

app.factory('eventBusService', function ($rootScope) {

    var msgBus = {};

    msgBus.publish = function (msg, data) {
        data = data || {};
        $rootScope.$broadcast(msg, data);
    };

    msgBus.subscribe = function (msg, scope, func) {
        return scope.$on(msg, func); // return for destroying listener
    };

    return msgBus;
});
"use strict";

app.filter('currencyNumberFilter', ['$locale', function ($locale) {

    return function (amount, divider) {
        if (angular.isUndefined(divider)) {
            divider = ' ';
        }

        if (amount === null) {
            return amount;
        }

        if (amount) {
            var parts = amount.toFixed(2).toString().split('.');
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, divider);

            return parts.join('.');
        } else {
            return '0.00';
        }
    };
}]);
'use strict';

/**
 * Example of use:
 * <input type="email" name="email2" ng-model="emailReg2" custom-validator="emailMatch" data-validate-function="checkEmailMatch(value)">
 * <span ng-show="registerForm.email2.$error.emailMatch">Emails have to match!</span>
 *
 * In controller:
 * $scope.checkEmailMatch=function(value) {
 *    return value===$scope.emailReg;
 * }
 */

app.directive('customValidator', [function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
            validateFunction: '&'
        },
        link: function (scope, elm, attr, ngModelCtrl) {
            ngModelCtrl.$parsers.push(function (value) {
                var result = scope.validateFunction({ 'value': value });
                if (result || result === false) {
                    if (result.then) {
                        result.then(function (data) {
                            // For promise type result object
                            ngModelCtrl.$setValidity(attr.customValidator, data);
                        }, function (error) {
                            ngModelCtrl.$setValidity(attr.customValidator, false);
                        });
                    } else {
                        ngModelCtrl.$setValidity(attr.customValidator, result);
                        return result ? value : undefined; // For boolean result return based on boolean value
                    }
                }
                return value;
            });
        }
    };
}]);
'use strict';

app.directive('noDirty', function () {
	return {
		require: 'ngModel',
		link: function (scope, element, attrs, ngModelCtrl) {
			// override the $setDirty method on ngModelController
			ngModelCtrl.$setDirty = angular.noop;
		}
	};
});
app.controller('cardController', function () {});
app.directive('card', function () {
  return {
    scope: {
      content: '='
    },
    restrict: 'E',
    templateUrl: 'scripts/components/card/card.html',
    controller: 'cardController',
    controllerAs: 'cc'
  };
});
app.controller('listController', function () {});
app.directive('list', function () {
  return {
    scope: {
      cards: '=',
      title: '=',
      addCard: '=',
      key: '@'
    },
    restrict: 'E',
    templateUrl: 'scripts/components/list/list.html',
    controller: 'listController',
    controllerAs: 'lc'
  };
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvb3RDb250cm9sbGVyLmpzIiwic2hhcmVkL2NvbnN0YW50cy5qcyIsInNoYXJlZC9ldmVudHMuanMiLCJzaGFyZWQvdXRpbHMuanMiLCJzZXJ2aWNlcy9kYXNoYm9hcmRTZXJ2aWNlLmpzIiwic2VydmljZXMvbGlzdFNlcnZpY2UuanMiLCJwYWdlcy9ib2FyZC9ib2FyZENvbnRyb2xsZXIuanMiLCJwYWdlcy9ob21lL2hvbWVDb250cm9sbGVyLmpzIiwic2hhcmVkL2RpcmVjdGl2ZXMvY29udGVudGVkaXRhYmxlLmpzIiwic2hhcmVkL2V2ZW50QnVzL2V2ZW50QnVzU2VydmljZS5qcyIsInNoYXJlZC9maWx0ZXJzL2N1cnJlbmN5TnVtYmVyRmlsdGVyLmpzIiwic2hhcmVkL3ZhbGlkYXRpb24vY3VzdG9tVmFsaWRhdG9yRGlyZWN0aXZlLmpzIiwic2hhcmVkL3ZhbGlkYXRpb24vbm9EaXJ0eS5qcyIsImNvbXBvbmVudHMvY2FyZC9jYXJkQ29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvY2FyZC9jYXJkRGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9saXN0L2xpc3RDb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9saXN0L2xpc3REaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkcHJvdmlkZSIsIiRodHRwUHJvdmlkZXIiLCIkcVByb3ZpZGVyIiwiQ09OU1RBTlRTIiwiRVZFTlRTIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJodG1sNU1vZGUiLCJoYXNoUHJlZml4IiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsIiRxIiwiZXZlbnRCdXNTZXJ2aWNlIiwicmVzcG9uc2UiLCJyZWplY3Rpb24iLCJyZWplY3QiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlc3BvbnNlIiwiZGF0YSIsIiRzY29wZSIsIiRyb290U2NvcGUiLCIkbG9jYXRpb24iLCJpbml0IiwiY29uc3RhbnRzIiwiQVBJX1VSTCIsIlBBVEgiLCJjb25zdGFudCIsImV2ZW50cyIsInJvdXRlQ2hhbmdlU3RhcnQiLCJsb2FkZXJTaG93IiwibG9hZGVySGlkZSIsImZhY3RvcnkiLCJmaW5kQnlGaWVsZCIsImFycmF5IiwidmFsdWUiLCJmaWVsZCIsImZpbHRlciIsIml0ZW0iLCJmaW5kQWxsQnlGaWVsZCIsIm1ha2VGbGF0Iiwib2JqZWN0IiwibmV3T2JqZWN0IiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsImlzT2JqZWN0IiwiaXNEYXRlIiwiSWQiLCJzZXJ2aWNlIiwiJGh0dHAiLCJnZXREYXNoYm9hcmRzIiwiZ2V0IiwiZ2V0RGFzaGJvYXJkYnlJZCIsImlkIiwiY3JlYXRlRGFzaGJvYXJkIiwicG9zdCIsImRlbGV0ZURhc2hib2FyZCIsImRlbGV0ZSIsImdldExpc3RzIiwiYm9hcmRJZCIsImNyZWF0ZUxpc3QiLCJkZWxldGVMaXN0IiwibGlzdElkIiwibGlzdHMiLCJ0aXRsZSIsIml0ZW1zIiwiY29udGVudCIsImFkZENhcmQiLCJpbmRleCIsImhvbWVDb250cm9sbGVyIiwiJGluamVjdCIsImRhc2hib2FyZFNlcnZpY2UiLCJib2FyZHMiLCJ0aGVuIiwic3RhdHVzVGV4dCIsImFkZEJvYXJkIiwibmFtZSIsImxlbmd0aCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVxdWlyZSIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsIm5nTW9kZWwiLCJyZWFkIiwiJHNldFZpZXdWYWx1ZSIsImh0bWwiLCIkcmVuZGVyIiwiJHZpZXdWYWx1ZSIsImJpbmQiLCIkYXBwbHkiLCJtc2dCdXMiLCJwdWJsaXNoIiwibXNnIiwiJGJyb2FkY2FzdCIsInN1YnNjcmliZSIsImZ1bmMiLCIkb24iLCIkbG9jYWxlIiwiYW1vdW50IiwiZGl2aWRlciIsImlzVW5kZWZpbmVkIiwicGFydHMiLCJ0b0ZpeGVkIiwidG9TdHJpbmciLCJzcGxpdCIsInJlcGxhY2UiLCJqb2luIiwidmFsaWRhdGVGdW5jdGlvbiIsImVsbSIsImF0dHIiLCJuZ01vZGVsQ3RybCIsIiRwYXJzZXJzIiwicmVzdWx0IiwiJHNldFZhbGlkaXR5IiwiY3VzdG9tVmFsaWRhdG9yIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCIkc2V0RGlydHkiLCJub29wIiwiY2FyZHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU1DLFFBQVFDLE1BQVIsQ0FBZSxRQUFmLEVBQXlCLENBQUMsV0FBRCxFQUFjLFNBQWQsRUFBeUIsWUFBekIsQ0FBekIsQ0FBWjs7QUFFQUYsSUFBSUcsTUFBSixDQUFXLENBQ1AsZ0JBRE8sRUFDVyxtQkFEWCxFQUNnQyxVQURoQyxFQUM0QyxlQUQ1QyxFQUM2RCxZQUQ3RCxFQUMyRSxXQUQzRSxFQUN3RixRQUR4RixFQUVQLFVBQVVDLGNBQVYsRUFBMEJDLGlCQUExQixFQUE2Q0MsUUFBN0MsRUFBdURDLGFBQXZELEVBQXNFQyxVQUF0RSxFQUFrRkMsU0FBbEYsRUFBNkZDLE1BQTdGLEVBQXFHOztBQUVqRztBQUNBOztBQUVBTixtQkFDS08sSUFETCxDQUNVLEdBRFYsRUFDZTtBQUNQQyxxQkFBYSw4QkFETjtBQUVQQyxvQkFBWSxnQkFGTDtBQUdQQyxzQkFBYztBQUhQLEtBRGYsRUFNS0gsSUFOTCxDQU1VLFFBTlYsRUFNb0I7QUFDWkMscUJBQWEsZ0NBREQ7QUFFWkMsb0JBQVksaUJBRkE7QUFHWkMsc0JBQWM7QUFIRixLQU5wQixFQVdLSCxJQVhMLENBV1UsTUFYVixFQVdrQjtBQUNWQyxxQkFBYTtBQURILEtBWGxCLEVBY0tHLFNBZEwsQ0FjZTtBQUNQQyxvQkFBWTtBQURMLEtBZGY7O0FBa0JBWCxzQkFBa0JZLFNBQWxCLENBQTRCLEtBQTVCLEVBQW1DQyxVQUFuQyxDQUE4QyxFQUE5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVgsa0JBQWNZLFlB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ImNvbnN0IGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdUcmVsbG8nLCBbJ25nQW5pbWF0ZScsICduZ1JvdXRlJywgJ25nU2FuaXRpemUnXSk7XHJcblxyXG5hcHAuY29uZmlnKFtcclxuICAgICckcm91dGVQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsICckcHJvdmlkZScsICckaHR0cFByb3ZpZGVyJywgJyRxUHJvdmlkZXInLCAnQ09OU1RBTlRTJywgJ0VWRU5UUycsXHJcbiAgICBmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkcHJvdmlkZSwgJGh0dHBQcm92aWRlciwgJHFQcm92aWRlciwgQ09OU1RBTlRTLCBFVkVOVFMpIHtcclxuXHJcbiAgICAgICAgLy8gZGlzYWJsZSBlcnJvciBvbiB1bmhhbmRsZWQgcmVqZWN0aW9uc1xyXG4gICAgICAgIC8vJHFQcm92aWRlci5lcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyhmYWxzZSk7XHJcblxyXG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC53aGVuKCcvJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzY3JpcHRzL3BhZ2VzL2hvbWUvaG9tZS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdob21lQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdoYydcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLndoZW4oJy9ib2FyZCcsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9wYWdlcy9ib2FyZC9ib2FyZC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdib2FyZENvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYmMnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvNDA0Jywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzY3JpcHRzL3BhZ2VzLzQwNC80MDQuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm90aGVyd2lzZSh7XHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnLzQwNCdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZShmYWxzZSkuaGFzaFByZWZpeCgnJyk7XHJcblxyXG4gICAgICAgIC8vICRwcm92aWRlLmRlY29yYXRvcignJGxvY2FsZScsIGZ1bmN0aW9uICgkZGVsZWdhdGUpIHtcclxuICAgICAgICAvLyAgIHZhciB2YWx1ZSA9ICRkZWxlZ2F0ZS5EQVRFVElNRV9GT1JNQVRTO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICB2YWx1ZS5TSE9SVERBWSA9IFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCJdO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICByZXR1cm4gJGRlbGVnYXRlO1xyXG4gICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGZ1bmN0aW9uICgkcSwgZXZlbnRCdXNTZXJ2aWNlLCBFVkVOVFMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50QnVzU2VydmljZS5wdWJsaXNoKEVWRU5UUy5sb2FkZXJTaG93KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW50QnVzU2VydmljZS5wdWJsaXNoKEVWRU5UUy5sb2FkZXJIaWRlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJ3Jlc3BvbnNlRXJyb3InOiBmdW5jdGlvbiAocmVqZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRCdXNTZXJ2aWNlLnB1Ymxpc2goRVZFTlRTLmxvYWRlckhpZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZS5wdXNoKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5dKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hcHAuY29udHJvbGxlcigncm9vdENvbnRyb2xsZXInLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRxJywgJyRsb2NhdGlvbicsICdldmVudEJ1c1NlcnZpY2UnLCAnQ09OU1RBTlRTJywgJ0VWRU5UUycsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJHEsICRsb2NhdGlvbiwgZXZlbnRCdXNTZXJ2aWNlLCBDT05TVEFOVFMsIEVWRU5UUykge1xuXG4gICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgJHNjb3BlLmluaXQoKTtcblxuICAgIH1cbl0pO1xuIiwidmFyIGNvbnN0YW50cyA9IHtcbiAgICBBUElfVVJMOiAnaHR0cHM6Ly90cmVsbG8tYXBpLWJ5LWFuZ2llLmhlcm9rdWFwcC5jb20vJyxcbiAgICBQQVRIOiAnJyxcbn07XG5cbmFwcC5jb25zdGFudCgnQ09OU1RBTlRTJywgY29uc3RhbnRzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGV2ZW50cyA9IHtcblxuICAgIC8vIHJvdXRlXG4gICAgcm91dGVDaGFuZ2VTdGFydDogJyRyb3V0ZUNoYW5nZVN0YXJ0JyxcblxuICAgIC8vIGxvYWRlZFxuICAgIGxvYWRlclNob3c6ICdsb2FkZXIuc2hvdycsXG4gICAgbG9hZGVySGlkZTogJ2xvYWRlci5oaWRlJ1xufTtcblxuYXBwLmNvbnN0YW50KCdFVkVOVFMnLCBldmVudHMpOyIsIid1c2Ugc3RyaWN0JztcblxuYXBwLmZhY3RvcnkoJ3V0aWxzJywgW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZpbmRCeUZpZWxkOiBmdW5jdGlvbiAoYXJyYXksIHZhbHVlLCBmaWVsZCkge1xuICAgICAgICAgICAgZmllbGQgPSBmaWVsZCB8fCAnSWQnO1xuICAgICAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtW2ZpZWxkXSA9PT0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXHQgICAgZmluZEFsbEJ5RmllbGQ6IGZ1bmN0aW9uIChhcnJheSwgZmllbGQsIHZhbHVlKSB7XG4gICAgICAgICAgICBmaWVsZCA9IGZpZWxkIHx8ICdJZCc7XG4gICAgICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bZmllbGRdID09PSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1ha2VGbGF0OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgbmV3T2JqZWN0ID0ge307XG5cdCAgICAgICAgaWYgKCFvYmplY3QpIHJldHVybiB7fTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMob2JqZWN0KS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KG9iamVjdFtrZXldKSB8fCBhbmd1bGFyLmlzRGF0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqZWN0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmplY3Rba2V5ICsgXCJJZFwiXSA9IG9iamVjdFtrZXldLklkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld09iamVjdDtcbiAgICAgICAgfVxuICAgIH07XG59XSk7XG4iLCJhcHAuc2VydmljZSgnZGFzaGJvYXJkU2VydmljZScsIFsnJGh0dHAnLCAnQ09OU1RBTlRTJywgZnVuY3Rpb24oJGh0dHAsIENPTlNUQU5UUykge1xyXG4gIHJldHVybiB7XHJcbiAgICBnZXREYXNoYm9hcmRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChDT05TVEFOVFMuQVBJX1VSTCArICdkYXNoYm9hcmRzJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldERhc2hib2FyZGJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoQ09OU1RBTlRTLkFQSV9VUkwgKyAnZGFzaGJvYXJkcy8nICsgaWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVEYXNoYm9hcmQ6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgcmV0dXJuICRodHRwLnBvc3QoQ09OU1RBTlRTLkFQSV9VUkwgKyAnZGFzaGJvYXJkcycsIGRhdGEpO1xyXG4gICAgfSxcclxuXHJcbiAgICBkZWxldGVEYXNoYm9hcmQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoQ09OU1RBTlRTLkFQSV9VUkwgKyAnZGFzaGJvYXJkcy8nICsgaWQpO1xyXG4gICAgfVxyXG4gIH1cclxufV0pO1xyXG4iLCJhcHAuc2VydmljZSgnbGlzdFNlcnZpY2UnLCBbJyRodHRwJywgJ0NPTlNUQU5UUycsIGZ1bmN0aW9uKCRodHRwLCBDT05TVEFOVFMpIHtcclxuICByZXR1cm4ge1xyXG4gICAgZ2V0TGlzdHM6IGZ1bmN0aW9uKGJvYXJkSWQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldChDT05TVEFOVFMuQVBJX1VSTCArICdkYXNoYm9hcmRzLycgKyBib2FyZElkICsgJy9saXN0cycpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVMaXN0OiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KENPTlNUQU5UUy5BUElfVVJMICsgJ2Rhc2hib2FyZHMvJyArIGlkICsgJy9saXN0cycsIGRhdGEpO1xyXG4gICAgfSxcclxuXHJcbiAgICBkZWxldGVMaXN0OiBmdW5jdGlvbihib2FyZElkLCBsaXN0SWQpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZShDT05TVEFOVFMuQVBJX1VSTCArICdkYXNoYm9hcmRzLycgKyBib2FyZElkICsgJy9saXN0cy8nICsgbGlzdElkKTtcclxuICAgIH1cclxuICB9XHJcbn1dKTtcclxuIiwiYXBwLmNvbnRyb2xsZXIoJ2JvYXJkQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcblxyXG4gICRzY29wZS5saXN0cyA9IFt7XHJcbiAgICB0aXRsZTogJ05lZWQgdG8gZG8nLFxyXG4gICAgaXRlbXM6IFt7IGNvbnRlbnQ6ICdMZWFybiBBbmd1bGFyNicgfV1cclxuICB9LCB7XHJcbiAgICB0aXRsZTogJ1JlYWR5JyxcclxuICAgIGl0ZW1zOiBbeyBjb250ZW50OiAnSmF2YVNjcmlwdCcgfV1cclxuICB9LCB7XHJcbiAgICB0aXRsZTogJ0luIHByb2Nlc3MnLFxyXG4gICAgaXRlbXM6IFt7IGNvbnRlbnQ6ICdJbnZlc3RpZ2F0ZSBBbmd1bGFySlMnIH1dXHJcbiAgfV07XHJcblxyXG4gIHRoaXMuYWRkQ2FyZCA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAkc2NvcGUubGlzdHNbaW5kZXhdLml0ZW1zLnB1c2goeyBjb250ZW50OiAnJyB9KTtcclxuICB9O1xyXG5cclxufV0pO1xyXG4iLCJhcHAuY29udHJvbGxlcignaG9tZUNvbnRyb2xsZXInLCBob21lQ29udHJvbGxlcik7XHJcblxyXG5ob21lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnZGFzaGJvYXJkU2VydmljZSddO1xyXG5cclxuZnVuY3Rpb24gaG9tZUNvbnRyb2xsZXIoJHNjb3BlLCBkYXNoYm9hcmRTZXJ2aWNlKSB7XHJcbiAgJHNjb3BlLmJvYXJkcyA9IFtdO1xyXG5cclxuICAkc2NvcGUuZ2V0RGFzaGJvYXJkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZGFzaGJvYXJkU2VydmljZS5nZXREYXNoYm9hcmRzKCkudGhlbihcclxuICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuYm9hcmRzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSxcclxuICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuYm9hcmRzID0gcmVzcG9uc2Uuc3RhdHVzVGV4dDtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmFkZEJvYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGF0YSA9IHsgbmFtZTogJ0Rhc2hib2FyZCAnICsgKCRzY29wZS5ib2FyZHMubGVuZ3RoICsgMSkgfTtcclxuICAgIGRhc2hib2FyZFNlcnZpY2VcclxuICAgICAgLmNyZWF0ZURhc2hib2FyZChkYXRhKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuZ2V0RGFzaGJvYXJkcygpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kZWxldGVEYXNoYm9hcmQgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgZGFzaGJvYXJkU2VydmljZVxyXG4gICAgICAuZGVsZXRlRGFzaGJvYXJkKGlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuZ2V0RGFzaGJvYXJkcygpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLmdldERhc2hib2FyZHMoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuaW5pdCgpO1xyXG5cclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hcHAuZGlyZWN0aXZlKFwiY29udGVudGVkaXRhYmxlXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICAgICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuXG4gICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmh0bWwoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgXCJcIik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJibHVyIGtleXVwIGNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmFwcC5mYWN0b3J5KCdldmVudEJ1c1NlcnZpY2UnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xuXG4gICB2YXIgbXNnQnVzID0ge307XG5cbiAgIG1zZ0J1cy5wdWJsaXNoID0gZnVuY3Rpb24obXNnLCBkYXRhKSB7XG4gICAgICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KG1zZywgZGF0YSk7XG4gICB9O1xuXG4gICBtc2dCdXMuc3Vic2NyaWJlID0gZnVuY3Rpb24obXNnLCBzY29wZSwgZnVuYykge1xuICAgICAgIHJldHVybiBzY29wZS4kb24obXNnLCBmdW5jKTsgLy8gcmV0dXJuIGZvciBkZXN0cm95aW5nIGxpc3RlbmVyXG4gICB9O1xuXG4gICByZXR1cm4gbXNnQnVzO1xuXG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5hcHAuZmlsdGVyKCdjdXJyZW5jeU51bWJlckZpbHRlcicsIFsnJGxvY2FsZScsIGZ1bmN0aW9uICgkbG9jYWxlKSB7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oYW1vdW50LCBkaXZpZGVyKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGRpdmlkZXIpKSB7XG4gICAgICAgICAgICBkaXZpZGVyID0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFtb3VudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbW91bnQpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGFtb3VudC50b0ZpeGVkKDIpLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgZGl2aWRlcik7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJzAuMDAnO1xuICAgICAgICB9XG4gICAgfTtcblxufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEV4YW1wbGUgb2YgdXNlOlxuICogPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJlbWFpbDJcIiBuZy1tb2RlbD1cImVtYWlsUmVnMlwiIGN1c3RvbS12YWxpZGF0b3I9XCJlbWFpbE1hdGNoXCIgZGF0YS12YWxpZGF0ZS1mdW5jdGlvbj1cImNoZWNrRW1haWxNYXRjaCh2YWx1ZSlcIj5cbiAqIDxzcGFuIG5nLXNob3c9XCJyZWdpc3RlckZvcm0uZW1haWwyLiRlcnJvci5lbWFpbE1hdGNoXCI+RW1haWxzIGhhdmUgdG8gbWF0Y2ghPC9zcGFuPlxuICpcbiAqIEluIGNvbnRyb2xsZXI6XG4gKiAkc2NvcGUuY2hlY2tFbWFpbE1hdGNoPWZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICByZXR1cm4gdmFsdWU9PT0kc2NvcGUuZW1haWxSZWc7XG4gKiB9XG4gKi9cblxuYXBwLmRpcmVjdGl2ZSgnY3VzdG9tVmFsaWRhdG9yJywgW2Z1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICB2YWxpZGF0ZUZ1bmN0aW9uOiAnJidcbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHIsIG5nTW9kZWxDdHJsKSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBzY29wZS52YWxpZGF0ZUZ1bmN0aW9uKHsgJ3ZhbHVlJzogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCB8fCByZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGhlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsgLy8gRm9yIHByb21pc2UgdHlwZSByZXN1bHQgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KGF0dHIuY3VzdG9tVmFsaWRhdG9yLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eShhdHRyLmN1c3RvbVZhbGlkYXRvciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoYXR0ci5jdXN0b21WYWxpZGF0b3IsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ID8gdmFsdWUgOiB1bmRlZmluZWQ7IC8vIEZvciBib29sZWFuIHJlc3VsdCByZXR1cm4gYmFzZWQgb24gYm9vbGVhbiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTsiLCIndXNlIHN0cmljdCc7XG5cbmFwcC5kaXJlY3RpdmUoJ25vRGlydHknLCBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB7XG5cdFx0cmVxdWlyZTogJ25nTW9kZWwnLFxuXHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWxDdHJsKSB7XG5cdFx0XHQvLyBvdmVycmlkZSB0aGUgJHNldERpcnR5IG1ldGhvZCBvbiBuZ01vZGVsQ29udHJvbGxlclxuXHRcdFx0bmdNb2RlbEN0cmwuJHNldERpcnR5ID0gYW5ndWxhci5ub29wO1xuXHRcdH1cblx0fVxufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ2NhcmRDb250cm9sbGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgXHJcbn0pO1xyXG4iLCJhcHAuZGlyZWN0aXZlKCdjYXJkJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIGNvbnRlbnQ6ICc9J1xyXG4gICAgfSxcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvY29tcG9uZW50cy9jYXJkL2NhcmQuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnY2FyZENvbnRyb2xsZXInLFxyXG4gICAgY29udHJvbGxlckFzOiAnY2MnXHJcbiAgfVxyXG59KTtcclxuIiwiYXBwLmNvbnRyb2xsZXIoJ2xpc3RDb250cm9sbGVyJywgZnVuY3Rpb24oKSB7XHJcblxyXG59KTtcclxuIiwiYXBwLmRpcmVjdGl2ZSgnbGlzdCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBjYXJkczogJz0nLFxyXG4gICAgICB0aXRsZTogJz0nLFxyXG4gICAgICBhZGRDYXJkOiAnPScsXHJcbiAgICAgIGtleTogJ0AnXHJcbiAgICB9LFxyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9jb21wb25lbnRzL2xpc3QvbGlzdC5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdsaXN0Q29udHJvbGxlcicsXHJcbiAgICBjb250cm9sbGVyQXM6ICdsYydcclxuICB9XHJcbn0pO1xyXG4iXX0=
